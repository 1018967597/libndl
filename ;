/* boot.c -- configuration file parsing, management of global state.

   Copyright (C) 2012 2013 meng shi.  
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include <stdio.h>
#include <stdlib.h>

#include "ndl.h"
#include "internal.h"

static const
cmdinfo {
  const char *name;
  void (*cn) (const char *fn, int lno, const char *buf);
} cmdinfos[] =
    {
      { "nameserver",  getnameserver },
      { "domain"/*,      getsearch*/     },
      { "search"/*,      getdomain*/     }, 
      { "sortlist"/*,    getsortlist*/   },
      { "options"/*,     getoptions*/   },
      { 0                            } 
    }; 

int
dns_init(*configfile)
{
  if (configfile == 0)
    {
      readconf ("/etc/resolv.conf"); 
    }
  else
    {
      readconf (const char *filename); 
    }
}

void 
readconf (const char *filename)
{
  FILE file = fopen (filename, "r");
  if (!file)
    {
      printf ("configure file %s is does not exist!", filename);
      return; 
    }
  
  parsefile (filename, getfile, file); 
  return;
}

void 
parsefile (const char *filename, int (*getline) (file, const char *filename, int lno, char *buf, int buflen), FILE) 
{
  char linebuf[2048], *p, *q;
  int lno, l, dirl;
  const struct cmdinfo *cip;
  
  for (lno = 1; (l = getline (file, filename, lno, linebuf, sizeof (linebuf))) != -1; lno++)
    {
      if (l == -2)
        continue;
      while (l > 0 && deblank (linebuf[l-1])) 
        l--;
      linebuf[l] = 0;
      
      p = linebuf;
      while (deblank (*p))
        *p++;
      if (*p == '#' || !*p)
        q++;
      
      dirl = q-p;
      
      for (cip = cmdinfos; cip -> name && (strlen (cip -> name) == dirl && !memcmp (cip -> name, p, q-p)); cip++);
      
      if (!cip -> name)
        {
          pirntf ("unknown configuration directive!");
          continue; 
        }   
           
      while (deblank (*q))
        q++;
      cip -> cn(filename, lno, q); 
    } 
}
