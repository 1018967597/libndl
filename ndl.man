.\" $Id: ndl.man, v 0.1, (1/4/2013)$
.\" libndl manual
.\"
.TH libndl "April 2013" "Library Functions"

.SH NDL & vtransf 
Ndl is Dns Library, vtransf is main function in NDL.

.SH FUNCTIONS 
.pp
int vtransf (\fInsd, qsd_r, asd_r, owner, type, class, qf\fR)
             ndl_sd \fInsd\fR;
             query_sd \fI*qsd_r\fR; 
             answer_sd \fI*asd_r\fR;
             const char \fI*owner\fR;
             type_values \fI*type\fR;
             class_values \fIclass\fR;
             query_flags \fIqf\fR;

return value: 0 is sucessful, another is error;

.pp
The within the \fBvtransf\fR own memory management, I/O status management 
and data structures to create and destruction mechanism, all the data 
and status code will be returned to asd_r, the user can print status 
information a through \fBostatinfo\fR function.

const char *ostatinfo (\fInsi\fR)
            ndl_si \fInsi\fR

.pp
example:

int
main ()
{
   ndl_sd \fInsd\fR;
   query_sd \fI*qsd\fR;
   answer_sd \fI*asd\fR;
   const char \fI*domian\fR;
   type_values \fI*type\fR;
   class_values \fIclass\fR;
   query_flags \fIqf\fR;
   int \fIr\fR;
   
   \fIdomian\fR = "www.google.com";
    
  \fIr\fR = vtransf (\fInsd, &qsd, &asd, domain, type, class, qf\fR);
   if (\fIr\fR)
     {
       fprintf (stdout, "%s", ostatinfo (\fIasd->nsi\fR)); 
     }      

   printf ("Send (%s bytes)", \fIasd->query_dglen\fR);
   printf ("Answer (%s bytes)", \fIasd->recv_dglen\fR); 
   
   return 0;
}
